// ARQUIVO COMPLETO: src/services/vector.service.js

import * as lancedb from 'vectordb';
import { log, error as logError } from '../utils/logger.service.js';
import path from 'path';

// O LanceDB armazenar√° seus dados em um diret√≥rio na raiz do projeto.
const LANCEDB_DIR = path.join(process.cwd(), 'lancedb');
const CRITERIA_TABLE_NAME = 'criteria_vectors';
const VECTOR_DIMENSION = 1536; // Dimens√£o do modelo 'text-embedding-3-small' da OpenAI

let db;
let criteriaTable;

/**
 * Inicializa a conex√£o com o LanceDB e cria a tabela de vetores se n√£o existir.
 * Deve ser chamado uma vez na inicializa√ß√£o do servidor.
 */
export const initializeVectorDB = async () => {
    try {
        log('--- INICIALIZA√á√ÉO DO LANCEDB ---');
        db = await lancedb.connect(LANCEDB_DIR);
        log(`‚úÖ Conectado ao LanceDB no diret√≥rio: ${LANCEDB_DIR}`);

        const tableNames = await db.tableNames();
        if (tableNames.includes(CRITERIA_TABLE_NAME)) {
            criteriaTable = await db.openTable(CRITERIA_TABLE_NAME);
            log(`‚úÖ Tabela de crit√©rios '${CRITERIA_TABLE_NAME}' aberta com sucesso.`);
        } else {
            // Cria a tabela com um schema inicial
            criteriaTable = await db.createTable(CRITERIA_TABLE_NAME, [
                { vector: Array(VECTOR_DIMENSION).fill(0), uuid: 'dummy' }
            ]);
            log(`‚úÖ Tabela de crit√©rios '${CRITERIA_TABLE_NAME}' criada com sucesso.`);
        }
    } catch (err) {
        logError('Falha cr√≠tica ao inicializar o LanceDB:', err.message);
        process.exit(1);
    }
};

/**
 * Adiciona ou atualiza um vetor na tabela de crit√©rios do LanceDB.
 * Usa o UUID do crit√©rio como identificador.
 * @param {string} uuid - O UUID do crit√©rio do PostgreSQL.
 * @param {number[]} vector - O vetor de embedding gerado pela OpenAI.
 */
export const addOrUpdateVector = async (uuid, vector) => {
    if (!criteriaTable) throw new Error('A tabela de crit√©rios do LanceDB n√£o est√° inicializada.');
    if (!uuid || !vector) {
        logError('Tentativa de adicionar vetor de crit√©rio com UUID ou vetor nulo.');
        return;
    }
    try {
        // A estrat√©gia de "upsert" mais simples √© deletar o registro antigo (se existir) e adicionar o novo.
        await criteriaTable.delete(`uuid = '${uuid}'`); 
        await criteriaTable.add([{ uuid, vector }]);
        log(`Vetor para o crit√©rio UUID ${uuid} foi adicionado/atualizado no LanceDB.`);
    } catch (err) {
        // O erro de dele√ß√£o em um registro inexistente √© esperado, ent√£o podemos ignor√°-lo
        if (!err.message.includes('No rows matched filter')) {
           logError(`Erro ao adicionar/atualizar vetor de crit√©rio para UUID ${uuid}:`, err.message);
        } else {
           // Se o erro for "n√£o encontrado para deletar", prosseguimos com a adi√ß√£o
           await criteriaTable.add([{ uuid, vector }]);
           log(`Vetor para o crit√©rio UUID ${uuid} foi adicionado (sem atualiza√ß√£o pr√©via) no LanceDB.`);
        }
    }
};

/**
 * Remove um vetor da tabela de crit√©rios do LanceDB usando o UUID do crit√©rio.
 * @param {string} uuid - O UUID do crit√©rio a ser removido.
 */
export const deleteVector = async (uuid) => {
    if (!criteriaTable) throw new Error('A tabela de crit√©rios do LanceDB n√£o est√° inicializada.');
    try {
        await criteriaTable.delete(`uuid = '${uuid}'`);
    } catch (err) {
        // Ignora o erro se o registro n√£o for encontrado, pois o resultado desejado (aus√™ncia do registro) √© o mesmo.
        if (!err.message.includes('No rows matched filter')) {
           logError(`Erro ao deletar vetor de crit√©rio para UUID ${uuid}:`, err.message);
        }
    }
};

/**
 * Busca os vetores de crit√©rios mais similares a um vetor de consulta.
 * @param {number[]} queryVector - O vetor a ser usado na busca.
 * @param {number} limit - O n√∫mero de resultados a serem retornados.
 * @returns {Promise<object[]>} Uma lista de resultados da busca (inclui UUIDs dos crit√©rios).
 */
export const searchSimilarVectors = async (queryVector, limit = 5) => {
    if (!criteriaTable) throw new Error('A tabela de crit√©rios do LanceDB n√£o est√° inicializada.');
    try {
        const results = await criteriaTable
            .search(queryVector)
            .limit(limit)
            .execute();
        
        return results;
    } catch (err) {
        logError('Erro ao realizar busca vetorial na tabela de crit√©rios:', err.message);
        return [];
    }
};


// --- NOVAS FUN√á√ïES PARA TABELAS TEMPOR√ÅRIAS DE PERFIL ---

/**
 * Cria uma nova tabela tempor√°ria para os vetores de um perfil.
 * @param {string} tableName - O nome √∫nico da tabela.
 * @param {Array<object>} data - Os dados a serem inseridos (ex: [{ vector, text }]).
 * @returns {Promise<lancedb.Table>} A inst√¢ncia da tabela criada.
 */
export const createProfileVectorTable = async (tableName, data) => {
    if (!db) throw new Error('LanceDB n√£o est√° inicializado.');
    try {
        // O LanceDB infere o schema a partir do primeiro objeto de dados.
        const table = await db.createTable(tableName, data);
        log(`‚úÖ Tabela tempor√°ria '${tableName}' criada com ${data.length} vetores de perfil.`);
        return table;
    } catch (err) {
        logError(`Erro ao criar tabela tempor√°ria '${tableName}':`, err.message);
        throw err; // Re-lan√ßa o erro para ser tratado pelo 'match.service'
    }
};

/**
 * Deleta uma tabela tempor√°ria.
 * @param {string} tableName - O nome da tabela a ser deletada.
 */
export const dropProfileVectorTable = async (tableName) => {
    if (!db) throw new Error('LanceDB n√£o est√° inicializado.');
    try {
        await db.dropTable(tableName);
        log(`üóëÔ∏è Tabela tempor√°ria '${tableName}' removida com sucesso.`);
    } catch (err) {
        logError(`Erro ao remover tabela tempor√°ria '${tableName}':`, err.message);
        // N√£o re-lan√ßamos o erro aqui, pois a falha na limpeza n√£o deve quebrar a requisi√ß√£o principal.
    }
};